/**
 * Chronicle Weaver - Firestore Security Rules
 * 
 * Comprehensive security rules for Chronicle Weaver's Firestore database.
 * Implements user-based access control, subscription tier enforcement,
 * and data validation for all collections.
 * 
 * Collections:
 * - users: User profiles and subscription data
 * - games: Game sessions and metadata
 * - turns: Individual game turns and AI responses
 * - memories: Player memory entries
 * - subscriptions: Stripe subscription data
 * - usage: Daily usage tracking
 * 
 * Last Updated: January 2025
 */

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // === USER COLLECTION ===
    // Users can only access their own data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // User subscription data
      match /subscriptions/{subscriptionId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      // User usage tracking
      match /usage/{date} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      // User memories
      match /memories/{memoryId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // === GAME COLLECTION ===
    // Games belong to users and can be accessed by game owner
    match /games/{gameId} {
      allow read, write: if request.auth != null && 
        (resource.data.userId == request.auth.uid || 
         request.auth.uid == resource.data.userId);
      
      // Game turns - only accessible by game owner
      match /turns/{turnId} {
        allow read, write: if request.auth != null && 
          get(/databases/$(database)/documents/games/$(gameId)).data.userId == request.auth.uid;
      }
      
      // Game memories - only accessible by game owner
      match /memories/{memoryId} {
        allow read, write: if request.auth != null && 
          get(/databases/$(database)/documents/games/$(gameId)).data.userId == request.auth.uid;
      }
    }
    
    // === SUBSCRIPTION COLLECTION ===
    // Subscription data accessible by user and admin
    match /subscriptions/{subscriptionId} {
      allow read, write: if request.auth != null && 
        (resource.data.userId == request.auth.uid || 
         request.auth.token.admin == true);
    }
    
    // === USAGE TRACKING COLLECTION ===
    // Usage data accessible by user and admin
    match /usage/{userId} {
      allow read, write: if request.auth != null && 
        (userId == request.auth.uid || 
         request.auth.token.admin == true);
    }
    
    // === ADMIN COLLECTION ===
    // Admin-only access for system management
    match /admin/{document=**} {
      allow read, write: if request.auth != null && 
        request.auth.token.admin == true;
    }
    
    // === ANALYTICS COLLECTION ===
    // Analytics data - read-only for users, write for system
    match /analytics/{document=**} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        request.auth.token.system == true;
    }
    
    // === HELPER FUNCTIONS ===
    
    // Check if user has active subscription
    function hasActiveSubscription(userId) {
      return exists(/databases/$(database)/documents/users/$(userId)/subscriptions/active) &&
        get(/databases/$(database)/documents/users/$(userId)/subscriptions/active).data.status == 'active';
    }
    
    // Check subscription tier
    function getSubscriptionTier(userId) {
      let userDoc = get(/databases/$(database)/documents/users/$(userId));
      return userDoc.data.subscriptionTier;
    }
    
    // Check if user is premium
    function isPremium(userId) {
      let tier = getSubscriptionTier(userId);
      return tier == 'premium' || tier == 'master';
    }
    
    // Check daily usage limits
    function checkUsageLimit(userId, action) {
      let today = request.time.toDate().toISOString().split('T')[0];
      let usageDoc = get(/databases/$(database)/documents/users/$(userId)/usage/$(today));
      let tier = getSubscriptionTier(userId);
      
      if (tier == 'free') {
        return usageDoc.data.aiCalls < 5;
      }
      return true; // Premium users have no limits
    }
    
    // Validate game data structure
    function isValidGameData(data) {
      return data.keys().hasAll(['userId', 'era', 'theme', 'characterName', 'difficulty']) &&
        data.userId is string &&
        data.era is string &&
        data.theme is string &&
        data.characterName is string &&
        data.difficulty is number &&
        data.difficulty >= 0 && data.difficulty <= 1;
    }
    
    // Validate turn data structure
    function isValidTurnData(data) {
      return data.keys().hasAll(['turnNumber', 'narrativeText', 'choices']) &&
        data.turnNumber is number &&
        data.narrativeText is string &&
        data.choices is list;
    }
    
    // === ENHANCED SECURITY RULES ===
    
    // Rate limiting for game creation
    match /games/{gameId} {
      allow create: if request.auth != null && 
        request.auth.uid == resource.data.userId &&
        isValidGameData(resource.data) &&
        // Limit game creation to 1 per hour per user
        request.time > get(/databases/$(database)/documents/users/$(request.auth.uid)).data.lastGameCreated + duration.value(1, 'h');
    }
    
    // Turn processing with usage limits
    match /games/{gameId}/turns/{turnId} {
      allow create: if request.auth != null && 
        get(/databases/$(database)/documents/games/$(gameId)).data.userId == request.auth.uid &&
        isValidTurnData(resource.data) &&
        checkUsageLimit(request.auth.uid, 'ai_call');
    }
    
    // Premium feature access
    match /games/{gameId} {
      allow update: if request.auth != null && 
        get(/databases/$(database)/documents/games/$(gameId)).data.userId == request.auth.uid &&
        // Only premium users can update certain fields
        (!('premiumFeatures' in resource.data) || isPremium(request.auth.uid));
    }
    
    // Memory creation with limits
    match /users/{userId}/memories/{memoryId} {
      allow create: if request.auth != null && 
        request.auth.uid == userId &&
        // Free users limited to 10 memories
        (isPremium(userId) || get(/databases/$(database)/documents/users/$(userId)/memories).size() < 10);
    }
    
    // === DATA VALIDATION ===
    
    // Validate user data
    match /users/{userId} {
      allow write: if request.auth != null && 
        request.auth.uid == userId &&
        resource.data.keys().hasAll(['email', 'createdAt', 'subscriptionTier']) &&
        resource.data.email is string &&
        resource.data.createdAt is timestamp &&
        resource.data.subscriptionTier in ['free', 'premium', 'master'];
    }
    
    // Validate subscription data
    match /subscriptions/{subscriptionId} {
      allow write: if request.auth != null && 
        resource.data.keys().hasAll(['userId', 'plan', 'status', 'currentPeriodEnd']) &&
        resource.data.userId is string &&
        resource.data.plan in ['free', 'premium', 'master'] &&
        resource.data.status in ['active', 'canceled', 'past_due', 'incomplete'];
    }
    
    // === AUDIT LOGGING ===
    
    // Log all write operations for security auditing
    match /audit/{auditId} {
      allow write: if request.auth != null;
      allow read: if request.auth != null && 
        request.auth.token.admin == true;
    }
  }
}
